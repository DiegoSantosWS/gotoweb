GO PARA WEB COM E 100 DOCKER!

Diego dos Santos
Analista de sistemas, WSITEBRASIL

diegosantosws1@gmail.com
@diegofdsemana


* O que é Golang?

.image images/go/go.jpg

* 
Go é uma linguagem de programação que simplifica o compartilhamento de códigos. 
Ela vem acompanhada de ferramentas que facilitam usar pacotes escritos por outras pessoas, além de fazer com que seja mais simples compartilhar nossos próprios pacotes.


.link https://novatec.com.br/livros/go-em-acao/ ** _Trecho_ _do_ _livro_ _Go_ _In_ _Action_

* Criar rotas com pacote HTTP do GO.

Como sabemos o Go tem muitos pacotes que podem nos auxiliar na criação de nossos programas. Como vamos criar uma api simples, vamos usar o pacote HTTP.

1) Mas o que é este pacote?

*R:* É uma extenção do pacote *NET*. para saber mais basta acessar o link abaixo.

2) O que ele faz?

*R:* O pacote HTTP fornece interação entre cliente e servidor HTTP

3) Como usar este pacote?

*R:* Para usar ele em nosso programa é simples bata chamar ele no inicio do arquivo da mesma forma que chamamos os outros pacotes.

continua...

* Veja exemplo:

  package main

  import "net/http"

  func main() {
      //code...
  }

Quando formos usar mais de um pacote, podemos chama-los assim:

  package main

  import (
      "net/http"
      "github.com/gorilla/mux"
  )

  func main() {
      //code...
  }

No exemplo acima eu chamei dois pacotes, o HTTP e MUX (usado para criar rotas)

* 

.play example_http/main.go

* 

No exemplo fiz um Get no website da minha empresa e convertir o retorno no para string para mostrar o resultado.
.link https://golang.org/pkg/net/http/ DOCUMENTAÇÃO PKG HTTP.

* Renderizando e entendo o pacote HTML/TEMPLATE do GO.

Como sabemos toda aplicação web é importante termos um template ou um css para visualização do websites e/ou blog e etc... 
Como já devo ter mencionado Go foi pensado também para web, e veio com ele um pacote HTML para renderizar nossos arquivos.

Não pense que vai excrever page.go e colocar o HTML dentro dela e pensar que vai compilar... ta muito enganado.

Para isso vamos usar o pacote HTML/TEMPLATE é muito simples de usar... 

* Exemplo

.code example_html/renderHtml/render.go

Em uma simplicidade enorme ele simplesmente irá fazer um PARSE na minha pasta e carregar os arquivos. 

* Exemplo 2

.code example_html/models/index.go

Vamos ver esse programa rodando, para que isso aconteça é preciso criarmos nossas rotas...

*  

.play example_html/main.go

Se executarmos o programa vamos... teremos ele rodando na porta 1234 como informado no exemplo acima.
Ao digitar http://localhost:1234 vai ser exibido a template da index se usamos a ROTA /contato será exibido o formulario.

* 

Com tudo eu não aconcelho criar uma aplicação web desta forma. É preferivel que crie uma API e uma aplicação web para consumir sua api.

Desta forma você pode ser duas ou mais aplicações. Imagine que está criando um site, app mobile, e seu site terá um sistema para genrênciar o conteúdo.
Logo se criar sua aplicação da forma mostrada, possívelmente so vai servir o site e o gerenciador. E o app mobile irá precisar de uma outra api. Ou seja, faça uma unica api para servir tudo de uma unica vez.

Vamos entender um pouco mais sobre isso no próximo topico, onde vou falar um pouco mais sobre rotas, porem vamos usar um router para facilitar nossa vida.

* Criando uma simples API.

.image images/pensador.jpg

* 

Antes de mais nada temos um projeto definido... e sabemos que vamos precisar servir 2 aplicações

- App mobile
- Web Site / gerenciador das aplicações

Vamos começar? last's

.image images/lats-go.png


* Criando as rotas para API.

Para criar nossas rotas vamos usar um *ROUTER* chamado Gorilla Mux. 
- *MUX:* multiplexador de solicitação HTTP
- *ROUTER:* CARINHA FEITO PARA FACILITAR NOSSAS VIDAS HTTP

Então vamos lá...

* 

.code projeto_api/routers/router.go

* 

Neste caso estou criando uma API para consultar CEP que conciste em 2 rotas, uma delas so para mostrar uma mensagem
a outra nos retorna os dados do cep, vamos entender...

1 - http://localhost:1234/v1/
    Recebe um get e mostra a seguinte mensagem no browser "Olá vamos consultar um cep?"

2 - http://localhost:1234/v1/cep/{id}
    Recebe um get e busca o metodo que vai consultar e retornar os dados de endereço?"

Mas onde vou informar o numero do cep?

R: O número do cep deve ser informado para o parametro {id} no metodo que faz a consulta ele receve esse valor em forma de variavel.
Sua url ficará assim: *http://localhost:1234/v1/cep/30626670*


.link https://github.com/DiegoSantosWS/gocep/blob/master/controlls/v1.go#L16 Vamos ver o no exemplo

* LINKS PARA DOC.

.link https://github.com/gorilla/mux GORILLA MUX

.link https://godoc.org/github.com/julienschmidt/httprouter HTTP ROUTER

* O que é DOCKER?

.image images/docker-logo.png

Docker é uma plataforma Open Source escrito em Go, que é uma linguagem de programação de alto desempenho desenvolvida dentro do Google, que facilita a criação e administração de ambientes isolados.

* Mas por que usar o Docker?

O Docker possibilita o empacotamento de uma aplicação ou ambiente inteiro dentro de um container, e a partir desse momento o ambiente inteiro torna-se portável para qualquer outro Host que contenha o Docker instalado.
Isso reduz drasticamente o tempo de deploy de alguma infraestrutura ou até mesmo aplicação, pois não há necessidade de ajustes de ambiente para o correto funcionamento do serviço, o ambiente é sempre o mesmo, configure-o uma vez e replique-o quantas vezes quiser.
Outra facilidade do Docker é poder criar suas imagens (containers prontos para deploy) a partir de arquivos de definição chamados Dockerfiles.

* Dockerfile.

Como já foi dito podemos criar nossos container personalizando uma *Dockerfile* nada mais é um arquivos com comandos que serão executados no momento da criação do container.
uma vez que personalizamos nossa imagem podemos criar um container com ela. veje um exemplo de *Dockerfile*

.code projeto_api/Dockerfile

* Dockerizando nossa API.

Agora já criamos nossa API e Dockerfile, ou seja já iniciamos o processo para usar o Docker em nossa aplicação.

Mas e agora já criei o dockerfile o que deve fazer?

R: Para de fato criar nossa imagem precisamos executar o seguinte comando em um terminal.

$ sudo docker build .

Ao executar esse comando vamos uma imagem será criada. agora vamos criar nosso container partindo dessa imagem.

* Docker compose

$ sudo docker-compose up # cria o container e mantem o terminal bloqueado.

$ sudo docker-compose up -d # cria o container e libera o terminal.

Mas você está falando de docker compose e como isso será executado?

Sim, para executar esse comando precisamos criar um arquivo chamado 
*docker-compose.yml* na raiz do nosso projeto. Com esse arquivo já podemos cria nosso container e ver se está tudo funcionando.

* Deploy to the Digital Ocean.

* Perguntas